{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "quizzes-game",
  "type": "registry:component",
  "title": "Quizzes Game",
  "description": "An interactive quizzes game component.",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/quizzes-game/quizzes-game.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"../../ui/button\";\nimport {\n  ArrowLeftIcon,\n  ArrowRightIcon,\n  BookIcon,\n  CheckIcon,\n  RotateCcwIcon,\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ntype Quiz = {\n  choices: string[];\n  question: string;\n  correct_answer: number;\n  explanation: string;\n};\n\nexport const QuizzesGame = () => {\n  const [quizzes, setQuizzes] = useState<Quiz[]>(MOCK_DATA);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);\n  const [showExplanation, setShowExplanation] = useState(false);\n\n  const navigateQuiz = (direction: \"next\" | \"prev\") => {\n    setSelectedAnswer(null);\n    setShowExplanation(false);\n    if (direction === \"next\") {\n      setCurrentQuestionIndex((prev) =>\n        prev < quizzes.length - 1 ? prev + 1 : prev\n      );\n      return;\n    }\n    setCurrentQuestionIndex((prev) => (prev > 0 ? prev - 1 : prev));\n  };\n\n  const handleSelectAnswer = (index: number) => {\n    if (showExplanation) return;\n    setSelectedAnswer(index);\n  };\n\n  return (\n    <div className=\"flex flex-col gap-y-4 w-full items-center p-4\">\n      <Question question={quizzes[currentQuestionIndex].question} />\n\n      <div className=\"grid grid-cols-2 w-full gap-4\">\n        {quizzes[currentQuestionIndex].choices.map((answer, index) => {\n          const isSelected = selectedAnswer === index;\n          const isCorrect =\n            index === quizzes[currentQuestionIndex].correct_answer &&\n            showExplanation;\n          const isIncorrect =\n            isSelected &&\n            index !== quizzes[currentQuestionIndex].correct_answer &&\n            showExplanation;\n          const type = isCorrect\n            ? \"correct\"\n            : isIncorrect\n            ? \"incorrect\"\n            : \"neutral\";\n\n          return (\n            <AnswerOption\n              key={answer}\n              answer={answer}\n              type={type}\n              isSelected={isSelected}\n              onClick={() => handleSelectAnswer(index)}\n            />\n          );\n        })}\n      </div>\n      <QuizControl\n        navigateQuiz={navigateQuiz}\n        quizIndex={currentQuestionIndex}\n        totalQuizzes={quizzes.length}\n        checkAnswer={() => setShowExplanation(true)}\n        resetQuiz={() => {\n          setSelectedAnswer(null);\n          setShowExplanation(false);\n        }}\n        isSelectedAnswer={selectedAnswer !== null}\n      />\n      {showExplanation && (\n        <Explanation explanation={quizzes[currentQuestionIndex].explanation} />\n      )}\n    </div>\n  );\n};\n\nconst Question = ({ question }: { question: string }) => {\n  return (\n    <div className=\"flex w-full cursor-pointer flex-col gap-4 rounded-lg border-gray-300 border-2 border-b-4 bg-(--card) px-2 py-4 md:px-5 md:py-7\">\n      <span className=\"whitespace-pre-line text-base md:text-lg\">\n        {question}\n      </span>\n    </div>\n  );\n};\n\nconst AnswerOption = ({\n  answer,\n  type,\n  isSelected,\n  onClick,\n}: {\n  answer: string;\n  type: \"correct\" | \"incorrect\" | \"neutral\";\n  isSelected: boolean;\n  onClick: () => void;\n}) => {\n  const baseClassname =\n    \"border-2 border-gray-300 p-3 md:p-5 rounded-lg cursor-pointer\";\n\n  const getClassnameByType = () => {\n    switch (type) {\n      case \"correct\":\n        return cn(baseClassname, \"border-green-500 bg-green-100\");\n      case \"incorrect\":\n        return cn(baseClassname, \"border-red-300 bg-red-100\");\n      default:\n        if (isSelected) {\n          return cn(baseClassname, \"border-gray-500 bg-gray-100\");\n        }\n        return cn(baseClassname);\n    }\n  };\n\n  return (\n    <div onClick={onClick} className={getClassnameByType()}>\n      {answer}\n    </div>\n  );\n};\n\nexport const QuizControl = ({\n  navigateQuiz,\n  quizIndex,\n  totalQuizzes,\n  checkAnswer,\n  resetQuiz,\n  isSelectedAnswer,\n}: {\n  navigateQuiz: (direction: \"next\" | \"prev\") => void;\n  quizIndex: number;\n  totalQuizzes: number;\n  checkAnswer: () => void;\n  resetQuiz: () => void;\n  isSelectedAnswer: boolean;\n}) => {\n  return (\n    <div className=\"flex justify-between w-full items-center\">\n      <div className=\"flex gap-x-2\">\n        <Button\n          variant={\"outline\"}\n          onClick={() => navigateQuiz(\"prev\")}\n          disabled={quizIndex === 0}\n          className=\"rounded-full size-9 border-gray-300 cursor-pointer\"\n        >\n          <ArrowLeftIcon className=\"size-4\" />\n        </Button>\n        <Button\n          variant={\"outline\"}\n          onClick={() => navigateQuiz(\"next\")}\n          disabled={quizIndex === totalQuizzes - 1}\n          className=\"rounded-full size-9 border-gray-300 cursor-pointer\"\n        >\n          <ArrowRightIcon className=\"size-4\" />\n        </Button>\n      </div>\n\n      <div className=\"flex gap-x-2 items-center\">\n        <Button\n          onClick={resetQuiz}\n          disabled={!isSelectedAnswer}\n          className=\"rounded-full size-9 border-gray-300 cursor-pointer\"\n        >\n          <RotateCcwIcon className=\"size-4\" />\n        </Button>\n        <Button\n          onClick={checkAnswer}\n          disabled={!isSelectedAnswer}\n          className=\"rounded-xl cursor-pointer\"\n        >\n          Kiểm tra\n          <CheckIcon className=\"size-4\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nconst Explanation = ({ explanation }: { explanation: string }) => {\n  return (\n    <div className=\"flex gap-3 rounded-xl bg-[#D9E2FF4D] p-4 w-full mt-2\">\n      <div className=\"w-[3px] flex-shrink-0 self-stretch rounded-full bg-[#0C66E4]\" />\n      <div className=\"flex flex-1 flex-col gap-2\">\n        <div className=\"flex items-center gap-2\">\n          <BookIcon className=\"size-5\" />\n          <p>Giải thích</p>\n        </div>\n        <p className=\"whitespace-pre-line text-sm\">{explanation}</p>\n      </div>\n    </div>\n  );\n};\n\nconst MOCK_DATA: Quiz[] = [\n  {\n    choices: [\n      \"Paulo Bento\",\n      \"Jose Peseiro\",\n      \"Sir Alex Ferguson\",\n      \"Carlos Queiroz\",\n    ],\n    question:\n      \"Ai là huấn luyện viên đặc biệt quan trọng với Nani từ khi anh còn ở học viện?\",\n    explanation:\n      \"Paulo Bento là người tin tưởng và giúp đỡ Nani từ khi còn ở học viện.\",\n    correct_answer: 0,\n  },\n  {\n    choices: [\"Premier League\", \"Champions League\", \"Europa League\", \"FA Cup\"],\n    question: \"Jose Peseiro đã cho Nani ra mắt ở giải đấu nào?\",\n    explanation:\n      \"Jose Peseiro đã trao cho Nani cơ hội ra mắt ở Champions League.\",\n    correct_answer: 1,\n  },\n  {\n    choices: [\"Sợ hãi\", \"Vui vẻ\", \"Thích thú\", \"Bình thường\"],\n    question:\n      \"Cảm xúc ban đầu của Nani khi làm việc với Sir Alex Ferguson là gì?\",\n    explanation:\n      \"Nani từng rất sợ Ferguson vì không hiểu tiếng Anh và sự nghiêm khắc của ông.\",\n    correct_answer: 0,\n  },\n  {\n    choices: [\n      \"Cristiano Ronaldo\",\n      \"Anderson\",\n      \"Patrice Evra\",\n      \"Carlos Queiroz\",\n    ],\n    question:\n      \"Ai là người nói với Nani rằng anh là một phần quan trọng trong đội hình của Ferguson?\",\n    explanation:\n      \"Patrice Evra đã nói với Nani rằng anh là một phần quan trọng trong đội hình của Ferguson.\",\n    correct_answer: 2,\n  },\n];\n",
      "type": "registry:component"
    }
  ]
}